commonfields:
  id: ExtractDomainFromUrlAndEmail
  version: -1
name: ExtractDomainFromUrlAndEmail
script: |-
  from tld import get_tld
  from validate_email import validate_email
  import re

  def extract_domain(the_input):
      is_url = None
      domain_from_mail = None
      is_email = validate_email(the_input)

      if is_email:
          # Take the entire part after the @ of the email
          domain_from_mail = the_input.split('@')[1]
      else:
          # Test if URL, else proceed as domain
          is_url = domain = get_tld(the_input, fail_silently=True)

      # Extract domain itself from a potential subdomain
      if domain_from_mail or not is_url:
          full_domain = 'https://'
          full_domain +=  domain_from_mail if domain_from_mail else the_input
          # get_tld fails to parse subdomain since it is not URL, over-ride error by injecting protocol.
          domain = get_tld(full_domain, fail_silently=True)

      # convert None to empty string if needed
      domain = '' if not domain else domain
      return domain

  domains = []
  the_input = demisto.args().get('input')

  if isinstance(the_input, str) or isinstance(the_input, unicode):
      the_input = argToList(the_input)

  # Otherwise assumes it's already an array
  for item in the_input:
      domains.append(extract_domain(item))
  demisto.results(domains)
type: python
tags:
- indicator-format
comment: Extract Domain from URL(s) and/or Email(s)
enabled: true
args:
- name: input
  required: true
  default: true
  description: The URL(s) or Email(s) to process
  isArray: true
scripttarget: 0
runonce: false
dockerimage: demisto/tld
runas: DBotWeakRole
releaseNotes: Update script to accept array input
tests:
  - ExtractDomainFromUrlAndEmail-Test
  - ExtractDomainFromEmailTest
